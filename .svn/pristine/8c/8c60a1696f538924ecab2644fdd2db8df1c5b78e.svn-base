"""
Copyright (C) 2014, Jill Huchital
"""

from apiclient.discovery import build
from apiclient.errors import HttpError

""" see https://console.developers.google.com/project/apps~videocategoryarcs/apiui/credential """
YOUTUBE_V3_API_KEY = 'AIzaSyDsGmr7tSSkxT23-thZ5cBk-AInLxPCSKw'
YOUTUBE_API_SERVICE_NAME = "youtube"
YOUTUBE_API_VERSION = "v3"
YOUTUBE_MAX_RESULTS = 25

import operator

def youtube_search(query_string):
    videos = []
    try:
        youtube = build(YOUTUBE_API_SERVICE_NAME, YOUTUBE_API_VERSION,
            developerKey=YOUTUBE_V3_API_KEY)
        # Call the search.list method to retrieve results matching the specified
        # query term.
        search_response = youtube.search().list(
            q=query_string,
            part="id,snippet",
            maxResults=YOUTUBE_MAX_RESULTS
        ).execute()

        """ Just look for videos, not channels or playlists """
        for search_result in search_response.get("items", []):
            if search_result["id"]["kind"] == "youtube#video":
                videos.append(dict(video_id = search_result["id"]["videoId"],
                    title = search_result["snippet"]["title"]))

    except HttpError, e:
        print "An HTTP error %d occurred:\n%s" % (e.resp.status, e.content)

    return videos


def get_all_playlists(dbs):
    retval = []
    for topic in dbs['topics'].find():
        if 'playlist' not in topic or len(topic['playlist']) < 1:
            continue
        print topic
        new_playlist = dict(playlist_name = topic['topic_name'],
                playlist_videos = topic['playlist'])
        print new_playlist
        retval.append(new_playlist)
    print retval
    return retval


def create_playlists(dbs):
    playlist = ['FN4PF4ulNpk', 'Jb9ePR_3lZQ', 'BZP1rYjoBgI']
    retval = {'playlists': [playlist, playlist, playlist]}
    video_lists = {}
    for category in dbs['categories'].find():
        print 'starting with category ' + category['category_name']
        for topic_name in category['topics']:
            topic = dbs['topics'].find_one({'topic_name': topic_name})
            print 'looking for topic ' + topic['topic_name']
            playlist = []
            for arcpos in category['arc']:
                video_choices = {}
                for c_search_term in arcpos['search_terms']:
                    for t_search_term in topic['search_terms']:
                        search_term = '\"' + c_search_term + '+' + t_search_term + '\"'
                        videos = youtube_search(search_term)
                        for v in videos:
                            if v['video_id'] not in video_choices:
                                video_choices[v['video_id']] = 1
                            else:
                                video_choices[v['video_id']] += 1
                sorted_choices = sorted(video_choices.iteritems(), key = operator.itemgetter(1), reverse=True)
                if len(sorted_choices) < 1 and arcpos['required'] is True:
                    print 'arcpos ' + arcpos['arcpos'] + ' empty; cannot complete playlist for ' + topic['topic_name'] + ' in category ' + category['category_name']
                    break
                else:
                    playlist.append(sorted_choices[0][0])
            print 'final playlist for ' + topic['topic_name']
            print playlist
            print 'before saving:'
            print topic
            topic['playlist'] = playlist
            dbs['topics'].save(topic)

            new_topic = dbs['topics'].find_one({'topic_name': topic_name})
            print 'after saving'
            print new_topic
    return retval
